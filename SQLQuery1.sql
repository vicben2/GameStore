CREATE DATABASE GAMESTOREDB;

USE GAMESTOREDB;

CREATE TABLE STORE_USER (
 	USER_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
  	USER_TYPE VARCHAR(100) NOT NULL,
  	EMAIL VARCHAR(50) NOT NULL,
  	PASSWORD VARCHAR(50) NOT NULL,
  	USERNAME VARCHAR(30) NOT NULL,
  	FNAME VARCHAR(50) NOT NULL,
  	LNAME VARCHAR(50) NOT NULL,
  	PROFILE_PIC VARCHAR(500),
  	BIO VARCHAR(500),
  	PROFILE_PAGE TEXT,
  	REGISTRATION_DATE DATETIME NOT NULL DEFAULT GETDATE(),
  	DATE_OF_BIRTH DATE NOT NULL
);

CREATE TABLE GAME (
	GAME_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
  	GAME_TITLE VARCHAR(50) NOT NULL,
  	GAME_DESC VARCHAR(300) NOT NULL,
	GAME_IMG VARCHAR(200) NOT NULL,
  	PUB_DATE DATETIME NOT NULL,
  	PRICE MONEY NOT NULL,
	DEV_ID INT NOT NULL,
	FOREIGN KEY(DEV_ID) REFERENCES STORE_USER(USER_ID)
);

CREATE TABLE PAYMENT (
 	PAYMENT_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
  	PAYMENT_METHOD VARCHAR(50) NOT NULL
);

CREATE TABLE ORDER_HEADER (
 	ORDER_HEADER_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	PAYMENT_ID INT NOT NULL, FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(PAYMENT_ID),
	PLAYER_ID INT NOT NULL, FOREIGN KEY(PLAYER_ID) REFERENCES STORE_USER(USER_ID),
  	ORDER_DATE DATETIME NOT NULL,
  	TOTAL_PRICE MONEY NOT NULL
);

CREATE TABLE REVIEW (
 	REVIEW_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	GAME_ID INT NOT NULL, FOREIGN KEY (GAME_ID) REFERENCES GAME(GAME_ID),
	PLAYER_ID INT NOT NULL,	FOREIGN KEY (PLAYER_ID) REFERENCES STORE_USER(USER_ID),
	ORDER_HEADER_ID INT NOT NULL, FOREIGN KEY (ORDER_HEADER_ID) REFERENCES ORDER_HEADER(ORDER_HEADER_ID)
);

CREATE TABLE ORDER_DETAIL (
 	ORDER_DETAIL_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	ORDER_HEADER_ID INT NOT NULL, FOREIGN KEY (ORDER_HEADER_ID) REFERENCES ORDER_HEADER(ORDER_HEADER_ID),
	GAME_ID INT NOT NULL, FOREIGN KEY (GAME_ID) REFERENCES GAME(GAME_ID),
  	QTY INT NOT NULL,
  	PRICE MONEY NOT NULL,
  	LINE_TOTAL MONEY NOT NULL
);

CREATE TABLE GENRE (
 	GENRE_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
  	GENRE VARCHAR(30) NOT NULL
);

CREATE TABLE GENRE_GAME (
	GENRE_ID INT NOT NULL, GAME_ID INT NOT NULL,
  	PRIMARY KEY (GENRE_ID, GAME_ID),
  	FOREIGN KEY (GENRE_ID) REFERENCES GENRE(GENRE_ID),
  	FOREIGN KEY (GAME_ID) REFERENCES GAME(GAME_ID)
);

INSERT INTO STORE_USER(USER_TYPE, EMAIL, PASSWORD, USERNAME, FNAME, LNAME, PROFILE_PIC, BIO, PROFILE_PAGE, DATE_OF_BIRTH)
VALUES
('DEV','vicbbbb@proton.me','testpass','vic','Vic','Ben','','','','2004-12-01')

INSERT INTO GAME(GAME_TITLE, GAME_DESC, GAME_IMG, DEV_ID, PRICE, PUB_DATE)
VALUES
('DRAGON QUEST', 'ADVENTURE DEFEAT THE DRAGON', 'https://via.placeholder.com/250x140?text=Not+Found', 1, 400, '2012-05-05'),
('CALL OF WARFARE', 'DUTY CALLS', 'https://via.placeholder.com/250x140?text=Not+Found', 1, 500, '2020-06-05'),
('SKY BUILDER', 'DAYS OF BABYLON', 'https://via.placeholder.com/250x140?text=Not+Found', 1, 450, '2017-05-05')

INSERT INTO GENRE(GENRE)
VALUES
('ADVENTURE'),
('FANTASY'),
('FIRST PERSON SHOOTER'),
('SANDBOX'),
('STRATEGY'),
('ACTION')

INSERT INTO GENRE_GAME(GAME_ID, GENRE_ID)
VALUES
(2, 1),
(2, 2),
(3, 3),
(3, 6),
(4, 4)

SELECT * FROM STORE_USER
SELECT * FROM GAME
SELECT * FROM GENRE



CREATE PROCEDURE SP_GET_GAMES_GENRES
	@COUNT INT
AS
BEGIN
	SELECT TOP (@COUNT) GA.GAME_TITLE, STRING_AGG(GR.GENRE, ', ') AS GENRES FROM GAME GA
	JOIN GENRE_GAME GG ON GA.GAME_ID = GG.GAME_ID
	JOIN GENRE GR ON GG.GENRE_ID = GR.GENRE_ID
	GROUP BY GAME_TITLE
END

CREATE PROCEDURE SP_GET_GAMES
	@COUNT INT
AS
BEGIN
	SELECT TOP (@COUNT) * FROM GAME
END




DROP PROCEDURE SP_GET_GAMES_GENRES