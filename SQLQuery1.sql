CREATE DATABASE GAMESTOREDB;

USE GAMESTOREDB;

--tables
CREATE TABLE STORE_USER (
 	USER_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
  	USER_TYPE VARCHAR(100) NOT NULL,
  	EMAIL VARCHAR(50) NOT NULL,
  	PASSWORD VARBINARY(256) NOT NULL,
  	USERNAME VARCHAR(30) NOT NULL,
  	FNAME VARCHAR(50) NOT NULL,
  	LNAME VARCHAR(50) NOT NULL,
  	PROFILE_PIC VARCHAR(500),
  	BIO VARCHAR(500),
  	PROFILE_PAGE TEXT,
  	REGISTRATION_DATE DATETIME NOT NULL DEFAULT GETDATE(),
  	DATE_OF_BIRTH DATE NOT NULL
);

CREATE TABLE GAME (
	GAME_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
  	GAME_TITLE VARCHAR(50) NOT NULL,
  	GAME_DESC VARCHAR(300) NOT NULL,
	GAME_IMG VARCHAR(200) NOT NULL,
  	PUB_DATE DATETIME NOT NULL DEFAULT GETDATE(),
  	PRICE MONEY NOT NULL,
	DEV_ID INT NOT NULL,
	FOREIGN KEY(DEV_ID) REFERENCES STORE_USER(USER_ID),
	DISABLED INT NOT NULL DEFAULT 0
);

CREATE TABLE PAYMENT (
 	PAYMENT_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
  	PAYMENT_METHOD VARCHAR(50) NOT NULL
);

CREATE TABLE ORDER_HEADER (
 	ORDER_HEADER_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	PAYMENT_ID INT NOT NULL, FOREIGN KEY(PAYMENT_ID) REFERENCES PAYMENT(PAYMENT_ID),
	PLAYER_ID INT NOT NULL, FOREIGN KEY(PLAYER_ID) REFERENCES STORE_USER(USER_ID),
  	ORDER_DATE DATETIME NOT NULL DEFAULT GETDATE(),
  	TOTAL_PRICE MONEY NOT NULL
);

CREATE TABLE REVIEW (
 	REVIEW_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	GAME_ID INT NOT NULL, FOREIGN KEY (GAME_ID) REFERENCES GAME(GAME_ID),
	PLAYER_ID INT NOT NULL,	FOREIGN KEY (PLAYER_ID) REFERENCES STORE_USER(USER_ID),
	ORDER_HEADER_ID INT NOT NULL, FOREIGN KEY (ORDER_HEADER_ID) REFERENCES ORDER_HEADER(ORDER_HEADER_ID),
	SCORE INT NOT NULL,
	COMMENT VARCHAR(1000)
);

CREATE TABLE ORDER_DETAIL (
 	ORDER_DETAIL_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
	ORDER_HEADER_ID INT NOT NULL, FOREIGN KEY (ORDER_HEADER_ID) REFERENCES ORDER_HEADER(ORDER_HEADER_ID),
	GAME_ID INT NOT NULL, FOREIGN KEY (GAME_ID) REFERENCES GAME(GAME_ID),
  	QTY INT NOT NULL,
  	PRICE MONEY NOT NULL,
  	LINE_TOTAL MONEY NOT NULL
);

CREATE TABLE GENRE (
 	GENRE_ID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
  	GENRE VARCHAR(30) NOT NULL
);

CREATE TABLE GENRE_GAME (
	GENRE_ID INT NOT NULL, GAME_ID INT NOT NULL,
  	PRIMARY KEY (GENRE_ID, GAME_ID),
  	FOREIGN KEY (GENRE_ID) REFERENCES GENRE(GENRE_ID),
  	FOREIGN KEY (GAME_ID) REFERENCES GAME(GAME_ID)
);

INSERT INTO PAYMENT(PAYMENT_METHOD)
VALUES
('CREDIT CARD'),
('PAYPAL'),
('GCASH'),
('CRYPTO')

INSERT INTO GENRE(GENRE)
VALUES
('ADVENTURE'),
('FANTASY'),
('FIRST PERSON SHOOTER'),
('SANDBOX'),
('STRATEGY'),
('ACTION'),
('MOBA'),
('MMO')

INSERT INTO STORE_USER(USER_TYPE, EMAIL, PASSWORD, USERNAME, FNAME, LNAME, PROFILE_PIC, BIO, PROFILE_PAGE, DATE_OF_BIRTH)
VALUES
('ADMIN','admin@game.store','testtest','john','John','Admin','','Administrator','','2004-12-01')


--stored procedures
CREATE PROCEDURE SP_GET_GAMES_GENRES
	@COUNT INT
AS
BEGIN
	SELECT TOP (@COUNT) 
    GA.GAME_ID, 
    STUFF((
        SELECT ', ' + GR.GENRE
        FROM GENRE_GAME GG
        JOIN GENRE GR ON GG.GENRE_ID = GR.GENRE_ID
        WHERE GG.GAME_ID = GA.GAME_ID
        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '') AS GENRES
	FROM GAME GA
	WHERE GA.DISABLED = 0
	GROUP BY GA.GAME_TITLE, GA.GAME_ID
END

CREATE PROCEDURE SP_GET_GAMES
	@COUNT INT
AS
BEGIN
	SELECT TOP (@COUNT) * FROM GAME
	WHERE DISABLED = 0
END

CREATE PROCEDURE SP_GET_USERS_BY_USERNAME
	@USERNAME VARCHAR(30)
AS
BEGIN
	SELECT * FROM STORE_USER
	WHERE USERNAME = @USERNAME
END

CREATE PROCEDURE SP_SIGNUP_USER
	@USERNAME VARCHAR(30),
	@PASSWORD VARCHAR(50),
	@USER_TYPE VARCHAR(100),
	@EMAIL VARCHAR(50),
	@FNAME VARCHAR(50),
	@LNAME VARCHAR(50),
	@DATE_OF_BIRTH DATETIME
AS
BEGIN
	DECLARE @SALT NVARCHAR(64) = '5l2.9t3S4L7Y'
	DECLARE @ENCRYPTED VARBINARY(256) = HASHBYTES('SHA2_256', @PASSWORD + @SALT);

	INSERT INTO STORE_USER(USER_TYPE, EMAIL, PASSWORD, USERNAME, FNAME, LNAME, DATE_OF_BIRTH, PROFILE_PIC)
	VALUES
	(@USER_TYPE, @EMAIL, @ENCRYPTED, @USERNAME , @FNAME, @LNAME, @DATE_OF_BIRTH, 'blank_profile_pic.jpg')
END

CREATE PROCEDURE SP_LOGIN_USER
	@USERNAME VARCHAR(30),
	@PASSWORD VARCHAR(50)
AS
BEGIN
	DECLARE @SALT NVARCHAR(64) = '5l2.9t3S4L7Y'; -- Same salt used originally
	-- Verify password
	SELECT USER_ID, USER_TYPE, EMAIL, USERNAME, FNAME, LNAME, PROFILE_PIC, BIO, DATE_OF_BIRTH, REGISTRATION_DATE FROM STORE_USER
	WHERE USERNAME = @USERNAME AND PASSWORD = HASHBYTES('SHA2_256', @PASSWORD + @SALT);
END

CREATE PROCEDURE SP_ADD_GAME
	@DEV_ID INT,
	@GAME_TITLE VARCHAR(50),
	@GAME_DESC VARCHAR(300),
	@PRICE MONEY,
	@GAME_IMG VARCHAR(200),
	@GENRE VARCHAR(100)
AS
BEGIN
	INSERT INTO GAME(DEV_ID, GAME_TITLE, GAME_DESC, GAME_IMG, PRICE)
	VALUES
	(@DEV_ID, @GAME_TITLE, @GAME_DESC, @GAME_IMG, @PRICE);

	DECLARE @NEWGAMEID INT
	SET @NEWGAMEID = SCOPE_IDENTITY()

	INSERT INTO GENRE_GAME(GAME_ID, GENRE_ID)
	VALUES
	(@NEWGAMEID, (SELECT GENRE_ID FROM GENRE WHERE GENRE = @GENRE))
END

CREATE PROCEDURE SP_GET_ALL_GAMES_COUNT
AS
BEGIN
	SELECT COUNT(GAME_ID) AS GAMES_COUNT FROM GAME
END

CREATE PROCEDURE SP_GET_ALL_USERS_COUNT
AS
BEGIN
	SELECT COUNT(USER_ID) AS USERS_COUNT FROM STORE_USER
END

CREATE PROCEDURE SP_GET_DEV_COUNT
AS
BEGIN
	SELECT COUNT(USER_ID) AS DEV_COUNT FROM STORE_USER
	WHERE USER_TYPE = 'DEV'
END

CREATE PROCEDURE SP_UPDATE_PROFILE
	@USERID INT,
    @EMAIL VARCHAR(50),
    @FNAME VARCHAR(50),
    @LNAME VARCHAR(50),
    @DATE_OF_BIRTH DATETIME,
	@BIO VARCHAR(500),
	@PROFILE_PIC VARCHAR(500)
AS
BEGIN
	UPDATE STORE_USER
	SET EMAIL=@EMAIL, FNAME=@FNAME, LNAME=@LNAME, DATE_OF_BIRTH=@DATE_OF_BIRTH, BIO=@BIO, PROFILE_PIC=@PROFILE_PIC
	WHERE USER_ID = @USERID
END

CREATE PROCEDURE SP_GET_USER
	@USERID INT
AS
BEGIN
	SELECT * FROM STORE_USER
	WHERE USER_ID = @USERID
END

CREATE PROCEDURE SP_GET_GAMES_BY_DEV
	@USERID INT
AS
BEGIN
	SELECT * FROM GAME
	WHERE DEV_ID = @USERID
END

CREATE PROCEDURE SP_GET_GENRES
AS
BEGIN
	SELECT GENRE FROM GENRE
END

CREATE PROCEDURE SP_GET_GENRES_BY_GAME
	@GAME_ID INT
AS
BEGIN
	SELECT GA.GAME_TITLE, GR.GENRE FROM GAME GA
	JOIN GENRE_GAME GG ON GA.GAME_ID = GG.GAME_ID
	JOIN GENRE GR ON GG.GENRE_ID = GR.GENRE_ID
	WHERE GA.GAME_ID = @GAME_ID
END

CREATE PROCEDURE SP_UPDATE_GAME
	@GAME_ID INT,
	@GAME_TITLE VARCHAR(50),
	@GAME_DESC VARCHAR(300),
	@PRICE MONEY,
	@GENRE VARCHAR(100),
	@GAME_IMG VARCHAR(200)
AS
BEGIN
	IF @GAME_IMG IS NOT NULL
	BEGIN
		UPDATE GAME
		SET GAME_TITLE=@GAME_TITLE, GAME_DESC=@GAME_DESC, PRICE=@PRICE, GAME_IMG=@GAME_IMG
		WHERE GAME_ID = @GAME_ID
	END
	ELSE BEGIN
		UPDATE GAME
		SET GAME_TITLE=@GAME_TITLE, GAME_DESC=@GAME_DESC, PRICE=@PRICE
		WHERE GAME_ID = @GAME_ID
	END

	IF NOT EXISTS(SELECT 1 FROM GENRE_GAME GG
		JOIN GAME G ON GG.GAME_ID = G.GAME_ID
		JOIN GENRE GR ON GG.GENRE_ID = GR.GENRE_ID
		WHERE G.GAME_ID = @GAME_ID AND GR.GENRE = @GENRE
	)
	BEGIN
		UPDATE GENRE_GAME
		SET GENRE_ID = (SELECT GENRE_ID FROM GENRE WHERE GENRE = @GENRE)
		WHERE GAME_ID = @GAME_ID
	END
END

CREATE PROCEDURE SP_ADD_NEW_ORDER
	@PAYMENT_ID INT,
	@PLAYER_ID INT,
	@GAME_ID INT,
	@QTY INT,
	@PRICE MONEY
AS
BEGIN
	DECLARE @TOTALPRICE MONEY
	SET @TOTALPRICE = @PRICE * @QTY;

	INSERT INTO ORDER_HEADER(PAYMENT_ID, PLAYER_ID, TOTAL_PRICE)
	VALUES
	(@PAYMENT_ID, @PLAYER_ID, @TOTALPRICE);

	DECLARE @NEW_ORDER_HEADER_ID INT;
	SET @NEW_ORDER_HEADER_ID = SCOPE_IDENTITY();

	INSERT INTO ORDER_DETAIL(ORDER_HEADER_ID, GAME_ID, QTY, PRICE, LINE_TOTAL)
	VALUES
	(@NEW_ORDER_HEADER_ID, @GAME_ID, @QTY, @PRICE, @TOTALPRICE)
END

CREATE PROCEDURE SP_GET_USER_PURCHASED_GAMES
	@USER_ID INT
AS
BEGIN
	SELECT G.GAME_ID, G.GAME_IMG, G.GAME_TITLE FROM GAME G
	JOIN ORDER_DETAIL OD ON G.GAME_ID = OD.GAME_ID
	JOIN ORDER_HEADER OH ON OD.ORDER_HEADER_ID = OH.ORDER_HEADER_ID
	JOIN STORE_USER S ON OH.PLAYER_ID = S.USER_ID
	WHERE OH.PLAYER_ID = @USER_ID
END

CREATE PROCEDURE SP_TOGGLE_DISABLE_GAME
	@GAME_ID INT
AS
BEGIN
	IF (SELECT DISABLED FROM GAME WHERE GAME_ID = @GAME_ID) = 0
	BEGIN
		UPDATE GAME
		SET DISABLED = 1
		WHERE GAME_ID=@GAME_ID
	END
	ELSE BEGIN
		UPDATE GAME
		SET DISABLED = 0
		WHERE GAME_ID=@GAME_ID
	END
END

CREATE PROCEDURE SP_ADD_REVIEW
	@GAME_ID INT,
	@PLAYER_ID INT,
	@SCORE INT,
	@COMMENT VARCHAR(1000)
AS
BEGIN
	DECLARE @ORDER_HEADER_ID INT = (SELECT TOP 1 H.ORDER_HEADER_ID FROM ORDER_HEADER H
	JOIN STORE_USER U ON H.PLAYER_ID = U.USER_ID
	JOIN ORDER_DETAIL D ON H.ORDER_HEADER_ID = D.ORDER_HEADER_ID
	JOIN GAME G ON D.GAME_ID = G.GAME_ID
	WHERE G.GAME_ID = @GAME_ID AND U.USER_ID = @PLAYER_ID
	ORDER BY H.ORDER_DATE DESC)

	INSERT INTO REVIEW(GAME_ID, ORDER_HEADER_ID, PLAYER_ID, SCORE, COMMENT)
	VALUES
	(@GAME_ID, @ORDER_HEADER_ID, @PLAYER_ID, @SCORE, @COMMENT)
END

CREATE PROCEDURE SP_GET_GAMES_AVG
	@COUNT INT
AS
BEGIN
	SELECT TOP (@COUNT) G.GAME_ID, CAST(AVG(R.SCORE) AS DECIMAL(10, 2)) AS AVG_SCORE FROM GAME G
	JOIN REVIEW R ON G.GAME_ID = R.GAME_ID
	GROUP BY G.GAME_ID
END

CREATE PROCEDURE SP_GET_SALES_REPORT_BY_DEV
	@DEV_ID INT
AS
BEGIN
	SELECT COUNT(G.GAME_ID) AS TOTAL_GAMES, SUM(LINE_TOTAL * 0.7) AS DEV_SALES, SUM(LINE_TOTAL * 0.3) AS ADMIN_SHARE, SUM(LINE_TOTAL) AS TOTAL_SALES, SUM(QTY) AS TOTAL_PURCHASES, AVG(OD.PRICE) AS AVG_PRICE FROM STORE_USER U
	LEFT JOIN GAME G ON U.USER_ID = G.DEV_ID
	JOIN ORDER_DETAIL OD ON G.GAME_ID = OD.GAME_ID
	JOIN ORDER_HEADER OH ON OD.ORDER_HEADER_ID = OH.ORDER_HEADER_ID
	WHERE U.USER_ID = @DEV_ID
	GROUP BY U.USER_ID
END


CREATE PROCEDURE SP_GET_PER_GAME_SALES_REPORT_BY_DEV
	@DEV_ID INT
AS
BEGIN
	SELECT G.GAME_TITLE, SUM(G.PRICE) AS PRICE, SUM(QTY) AS PURCHASE_COUNT, SUM(OD.LINE_TOTAL) AS TOTAL_REV, SUM(OD.LINE_TOTAL * 0.3) AS ADMIN_SHARE, SUM(OD.LINE_TOTAL * 0.7) AS DEV_SHARE FROM STORE_USER U
	JOIN GAME G ON U.USER_ID = G.DEV_ID
	JOIN ORDER_DETAIL OD ON G.GAME_ID = OD.GAME_ID
	JOIN ORDER_HEADER OH ON OD.ORDER_HEADER_ID = OH.ORDER_HEADER_ID
	WHERE U.USER_ID = @DEV_ID
	GROUP BY G.GAME_ID, G.GAME_TITLE, G.PRICE
END

DROP PROCEDURE SP_GET_ALL_PER_GAME_SALES

CREATE PROCEDURE SP_GET_ALL_PER_GAME_SALES
    @ORDER_BY NVARCHAR(128),
	@DEV NVARCHAR(128),
	@GAME_TITLE NVARCHAR(128)
AS
BEGIN
    DECLARE @SQL NVARCHAR(MAX);
    SET @SQL = N'SELECT G.GAME_ID, G.GAME_TITLE, G.PUB_DATE, G.GAME_DESC, G.GAME_IMG, G.PRICE, U.USERNAME, SUM(QTY) AS TOTAL_PURCHASES, SUM(LINE_TOTAL) AS TOTAL_REVENUE, SUM(LINE_TOTAL * 0.3) AS ADMIN_SHARE, SUM(LINE_TOTAL * 0.7) AS DEV_SHARE FROM GAME G
		JOIN STORE_USER U ON G.DEV_ID = U.USER_ID
		JOIN ORDER_DETAIL OD ON G.GAME_ID = OD.GAME_ID
		JOIN ORDER_HEADER OH ON OD.ORDER_HEADER_ID = OH.ORDER_HEADER_ID
		WHERE (@DEV IS NULL OR U.USERNAME = @DEV) AND (@GAME_TITLE IS NULL OR G.GAME_TITLE LIKE ''%'' + @GAME_TITLE + ''%'')
		GROUP BY G.GAME_ID, G.GAME_TITLE, G.PUB_DATE, G.GAME_DESC, G.GAME_IMG, G.PRICE, U.USERNAME
		ORDER BY ' + QUOTENAME(@ORDER_BY) + ' DESC';
    EXEC sp_executesql @SQL, N'@DEV NVARCHAR(128), @GAME_TITLE NVARCHAR(128)', @DEV, @GAME_TITLE;
END

CREATE PROCEDURE SP_GET_ALL_USER_PURCHASES
AS
BEGIN
	SELECT G.GAME_ID, U.USERNAME, OH.ORDER_DATE, OD.PRICE, OD.QTY FROM STORE_USER U
	JOIN ORDER_HEADER OH ON U.USER_ID = OH.PLAYER_ID
	JOIN ORDER_DETAIL OD ON OH.ORDER_HEADER_ID = OD.ORDER_HEADER_ID
	JOIN GAME G ON G.GAME_ID = OD.GAME_ID
	GROUP BY G.GAME_ID, U.USERNAME, OH.ORDER_DATE, OD.PRICE, OD.QTY
	ORDER BY U.USERNAME
END

SELECT * FROM GENRE
SELECT * FROM GAME
SELECT * FROM STORE_USER
SELECT * FROM GENRE_GAME
SELECT * FROM PAYMENT
SELECT * FROM ORDER_DETAIL
SELECT * FROM ORDER_HEADER
SELECT * FROM REVIEW

ALTER TABLE ORDER_HEADER
ADD CONSTRAINT ORDER_DATE_DEFAULT_DATE
DEFAULT GETDATE() FOR ORDER_DATE